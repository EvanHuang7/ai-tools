version: "3"

tasks:
  # git describe creates a human-readable version identifier based on Git metadata.
  # For example, v1.2.3-14-gabcdef means "v1.2.3" is most recent tag,
  # and there have been 14 commits since that tag, and the current commit hash is abcdef.
  generate-version-tag:
    cmds:
      - cmd: git describe --tags --always --first-parent --match "[0-9]*.[0-9]*.[0-9]*"
        silent: true
    desc: "Use git describe to generate a tag based on the latest release tag"

  # Take input of a path and recursively goes through every files in the repo
  # and look for input of identifier comment and update them with new tag.
  update-image-tags:
    desc: "Recursively update image tags in files with the specified comment"
    vars:
      # Exclude this Taskfile.yaml file to avoid the identifier comments
      # in this Taskfile.yaml file to be modified by this task cli itself.
      EXCLUDED_FILES: |
        {{.TASKFILE_DIR}}/Taskfile.yaml
        MORE_FILES_CAN_GO_HERE
    # 1st cmd checks if required vars (NEW_TAG, IDENTIFIER_COMMENT,
    # and STARTING_PATH) are provided.
    # 2nd cmd prints debug info
    # 3rd cmd searchs files with "IDENTIFIER_COMMENT" and
    # replace lines with NEW_TAG
    cmds:
      - cmd: |
          if [ -z "{{.NEW_TAG}}" ] || [ -z "{{.IDENTIFIER_COMMENT}}" ] || [ -z "{{.STARTING_PATH}}" ]; then
            echo "Usage: task update-image-tags NEW_TAG=new-tag IDENTIFIER_COMMENT='# THIS_IS_MY_IMAGE_TAG' STARTING_PATH=/path/to/start" && exit 1;
          fi
      - cmd: |
          echo "STARTING_PATH: {{ .STARTING_PATH }}"
          echo "IDENTIFIER_COMMENT: {{ .IDENTIFIER_COMMENT }}"
          echo "NEW_TAG: {{ .NEW_TAG }}"
        silent: true
      - cmd: |
          find "{{.STARTING_PATH}}" -type f \( -name "*.yaml" -o -name "*.yml" \) -exec grep -l "{{.IDENTIFIER_COMMENT}}" {} \; | while read -r file; do
            if ! echo "{{ .EXCLUDED_FILES }}" | grep -q "$file"; then
              echo "Updating: $file"
              sed -i "s|\(\s*.*:\s*\).* \({{ .IDENTIFIER_COMMENT }}\)|\1{{ .NEW_TAG }} \2|" "$file";
            fi
          done

  # Ensure "NEW_TAG" is provided
  check-new-tag-var:
    desc: "Check if NEW_TAG variable is set"
    cmds:
      - cmd: |
          if [ -z "{{.NEW_TAG}}" ] ; then
            echo "NEW_TAG var is required" && exit 1;
          fi

  # Update image tags for Staging with task clis, check-new-tag-var and update-image-tags
  update-staging-image-tags:
    desc: "Update image tags for kluctl staging config"
    cmds:
      - task: check-new-tag-var
      - task: update-image-tags
        # "# STAGING_IMAGE_TAG" comments exists in the "staging.yaml" file
        # in "kluctl" folder.
        vars:
          IDENTIFIER_COMMENT: "# STAGING_IMAGE_TAG"
          # Starts at the repo root directory by using the
          # absolute path of the root of git repo
          STARTING_PATH:
            sh: git rev-parse --show-toplevel

  # Update image tags for Production with task clis, check-new-tag-var and update-image-tags
  update-production-image-tags:
    desc: "Update image tags for kluctl production config"
    cmds:
      - task: check-new-tag-var
      - task: update-image-tags
        # "# PRODUCTION_IMAGE_TAG" comments exists in the "production.yaml" file
        # in "kluctl" folder.
        vars:
          IDENTIFIER_COMMENT: "# PRODUCTION_IMAGE_TAG"
          STARTING_PATH:
            sh: git rev-parse --show-toplevel
