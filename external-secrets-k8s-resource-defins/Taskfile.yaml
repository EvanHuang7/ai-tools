version: "3"

env:
  BORDER: double
  BORDER_FOREGROUND: "212"
  PADDING: "1 1"
  MARGIN: "1 1"

tasks:
  ######### 2nd Cli Format #########
  # helm upgrade --install <RELEASE_NAME> \
  # <REPO_NAME>/<CHART_NAME> \
  # --namespace <NAMESPACE> \
  # --values <VALUES_FILE> \
  # --create-namespace \
  # --version <CHART_VERSION>
  ######### 2nd cli Explanation #########
  # A K8s service account (KSA) named "external-secrets" is created automatically in
  # namespace as part of External Secrets Operator (ESO) Helm chart installation.
  # The full ID of a KSA in GKE: [PROJECT_ID].svc.id.goog[NAMESPACE/SERVICE_ACCOUNT_NAME]
  # So, This KSA full ID is "steadfast-pivot-462821-p7.svc.id.goog[ai-tools/external-secrets]".
  01-install-external-secrets:
    desc: "Install external secrets operator"
    cmds:
      - helm repo add external-secrets https://charts.external-secrets.io
      - |
        helm upgrade --install external-secrets \
          external-secrets/external-secrets \
          -n ai-tools \
          --values values.yaml \
          --create-namespace \
          --version 0.9.19

  ######### 1st cli Explanation #########
  # Creates a GCP IAM service account (Google service account/GSA)
  # named "external-secrets" in GCP level, and it's full GSA email
  # format is: "<SERVICE_ACCOUNT_NAME>@<GCP_PROJECT_ID>.iam.gserviceaccount.com".
  # This case is "external-secrets@steadfast-pivot-462821-p7.iam.gserviceaccount.com"

  ######### 2nd Cli Format #########
  # gcloud projects add-iam-policy-binding [PROJECT_ID] \
  # --member="serviceAccount:[GSA_EMAIL]" \
  # --role="[ROLE_NAME]"
  ######### 2nd cli Explanation #########
  # Grants the IAM service account permission to Secret Manager by binding
  # "secretmanager.secretAccessor" role to this "external-secrets" GSA.

  ######### 3rd Cli Format #########
  # gcloud iam service-accounts add-iam-policy-binding [GSA_EMAIL] \
  # --role roles/iam.workloadIdentityUser \
  # --member "serviceAccount:[PROJECT_ID].svc.id.goog[NAMESPACE/KSA_NAME]"
  ######### GKE Workload Definition #########
  # In GKE, a workload refers to an application running in a container,
  # typically managed by K8s using resources like: "Deployment", "StatefulSet",
  # "DaemonSet", "Job", "Pod". So, A GKE workload means
  # a containerized app (e.g., Node.js, Python, or Go app) running in GKE.
  ######### Relationship between Workload and KSA #########
  # KSA is the identity that workload (eg, a pod) uses within the cluster
  # and with GCP via Workload Identity. A workload can only be associated with
  # one KSA at a time, but one KSA can be used by lots of workloads.
  # We specify it in the pod (or deployment) manifest, If it's not specified,
  # the pod uses the default service account for its namespace (default).
  ######### Workload Identity Definition #########
  # Workload Identity is a trust relationship between KSA and GSA.
  # It is established by "an annotation on the KSA (declaring intent to impersonate the GSA)"
  # and "two IAM policies binding on the GSA (granting impersonation permission)".
  # Workload Identity is GKE’s way of securely allowing Kubernetes Pods
  # to impersonate GSAs without needing to download and mount service account keys.
  ######### 3rd and 4th clis Explanation #########
  # Binds "iam.workloadIdentityUser" role to K8s service account,
  # this role allows KSA to impersonate GSA securely.
  # Binds "roles/iam.serviceAccountTokenCreator" role to K8s service account,
  # this role allows the KSA to generate the token used for that impersonation.
  # We finished both annotaton and binding roles for KAS and GSA,
  # which means the GKE workload (e.g., a pod) can access GCP resources like Cloud Storage,
  # Pub/Sub, or Firestore without needing to manage service account keys manually.
  ######### A full example flow #########
  # A workload (eg. a pod) runs with a KSA (eg. "external-secrets") ->
  # That KSA has an annotation pointing to a GSA (eg. "external-secrets" in GCP IAM) ->
  # The GSA allows the KSA to impersonate it via IAM policy bindings ("roles/secretmanager.secretAccessor" and "roles/iam.serviceAccountTokenCreator")
  # -> As a result, your GKE pod can now fetch secrets securely from GCPSM.
  02-create-iam-service-account:
    desc: "Create GCP IAM service account (GSA) and attach necessary permissions"
    cmds:
      - |
        gcloud iam service-accounts create external-secrets \
          --display-name "External Secrets Service Account"
      - cmd: gum style "Attach roles/secretmanager.secretAccessor to IAM service account"
        silent: true
      - |
        gcloud projects add-iam-policy-binding steadfast-pivot-462821-p7 \
          --member="serviceAccount:external-secrets@steadfast-pivot-462821-p7.iam.gserviceaccount.com" \
          --role="roles/secretmanager.secretAccessor"
      - cmd: gum style "Attach roles/iam.workloadIdentityUser to allows the KSA to impersonate the GSA"
        silent: true
      - |
        gcloud iam service-accounts add-iam-policy-binding external-secrets@steadfast-pivot-462821-p7.iam.gserviceaccount.com \
          --role roles/iam.workloadIdentityUser \
          --member "serviceAccount:steadfast-pivot-462821-p7.svc.id.goog[ai-tools/external-secrets]"
      - cmd: gum style "Attach roles/iam.serviceAccountTokenCreator to allow the KSA to generate the token used for that impersonation"
        silent: true
      - |
        gcloud iam service-accounts add-iam-policy-binding external-secrets@steadfast-pivot-462821-p7.iam.gserviceaccount.com \
          --role="roles/iam.serviceAccountTokenCreator" \
          --member="serviceAccount:steadfast-pivot-462821-p7.svc.id.goog[ai-tools/external-secrets]"

  # Annotate the "external-secrets" K8s serviceAccount with the
  # GCP IAM service account ("external-secrets") email.
  # In order to enable a Workload Identity trust relationship,
  # We need to finish both "Annotate the Kubernetes ServiceAccount with GSA"
  # (This tells GKE: “This KSA wants to act as this GSA.”) and "Bind the
  # KSA with GSA to allow impersonation" (This tells GCP IAM: “This KSA
  # is allowed to impersonate this GSA.”).
  # NOTE: "01-install-external-secrets" cli already added the annotation
  # by passing the "values.yaml" file in ESO Helm chart installation.
  # So we can technically skil it if we already ran "01-install-external-secrets" cli.
  03-annotate-kubernetes-service-account:
    cmds:
      - cmd: gum style "Annotate K8s service account to allow it to use IAM serivce account via workload identity"
        silent: true
      - kubectl apply -f ServiceAccount.yaml
    desc: "Add annotation to K8s service account for workload identity"

  # Set External Secrets Operator to look for secrets in GCP Secret Manager
  # by appling ClusterSecretStore configuration
  04-apply-cluster-secret-store:
    desc: "Apply the ClusterSecretStore configuration"
    cmds:
      - kubectl apply -f ClusterSecretStore.yaml

  # Tells External Secrets Operator to fetch secrets from GCP Secret Manager.
  # Then, creates K8s Secrets in sepecified namespace by appling ExternalSecret configuration.
  # TODO: Add for go and node backends
  05-apply-external-secret:
    desc: "Apply the ExternalSecret configuration"
    cmds:
      - kubectl apply -f PythonExternalSecret.yaml

  # Clis to get k8s secrets value
  07-get-secret-value:
    desc: "Retrieve the secret value from the Kubernetes api"
    cmds:
      - kubectl get secrets python-backend-secrets -o yaml | yq '.data.MONGODB_URL' | base64 -d
      - kubectl get secrets python-backend-secrets -o yaml | yq '.data.REDIS_URL' | base64 -d
