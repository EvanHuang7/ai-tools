version: "3"

env:
  BORDER: double
  BORDER_FOREGROUND: "212"
  PADDING: "1 1"
  MARGIN: "1 1"

tasks:
  # A K8s service account named "external-secrets" is created automatically in namespace
  # by the Helm chart we applied when installing External Secrets Operator (ESO).
  # It's full ID in google is "steadfast-pivot-462821-p7.svc.id.goog[external-secrets/external-secrets]".
  01-install-external-secrets:
    desc: "Install external secrets operator"
    cmds:
      - helm repo add external-secrets https://charts.external-secrets.io
      - |
        helm upgrade --install external-secrets \
          external-secrets/external-secrets \
          -n external-secrets \
          --values values.yaml \
          --create-namespace \
          --version 0.9.19

  ######### 1st cli Explanation #########
  # First, Creates a GCP IAM service account named "external-secrets", and it's
  # full ID in google is "external-secrets@<GCP-project-id>.iam.gserviceaccount.com".

  ######### 2nd Cli Format #########
  ######### 2nd cli Explanation #########
  # Then, Grants the IAM service account permission to Secret Manager by binding
  # "secretmanager.secretAccessor" role to this "external-secrets" service account,

  ######### 3rd Cli Format #########
  # gcloud iam service-accounts add-iam-policy-binding [GSA_EMAIL] \
  # --role roles/iam.workloadIdentityUser \
  # --member "serviceAccount:[PROJECT_ID].svc.id.goog[NAMESPACE/KSA_NAME]"
  ######### 3rd cli Explanation #########
  # Then, bind "iam.workloadIdentityUser" role to K8s service account, this role allows
  # K8s service accounts to impersonate GCP IAM service accounts securely.
  # This means the workload (e.g., a pod in GKE) can access GCP resources like Cloud Storage,
  # Pub/Sub, or Firestore without needing to manage service account keys manually.
  # This binding allows only pods using "external-secrets KSA" in "external-secrets namespace" to impersonate the GSA.
  # If you want another pod in a different namespace (say, "default") to impersonate
  # the same GSA, youâ€™d have to create another binding for serviceAccount:my-project.svc.id.goog[default/external-secrets].
  # ???
  02-create-iam-service-account:
    desc: "Create GCP IAM service account and attach necessary permissions"
    cmds:
      - |
        gcloud iam service-accounts create external-secrets \
          --display-name "External Secrets Service Account"
      - cmd: gum style "Attach roles/secretmanager.secretAccessor to IAM service account"
        silent: true
      - |
        gcloud projects add-iam-policy-binding steadfast-pivot-462821-p7 \
          --member="serviceAccount:external-secrets@steadfast-pivot-462821-p7.iam.gserviceaccount.com" \
          --role="roles/secretmanager.secretAccessor"
      - cmd: gum style "Attach roles/iam.workloadIdentityUser to kubernetes service account"
        silent: true
      - |
        gcloud iam service-accounts add-iam-policy-binding external-secrets@steadfast-pivot-462821-p7.iam.gserviceaccount.com \
          --role roles/iam.workloadIdentityUser \
          --member "serviceAccount:steadfast-pivot-462821-p7.svc.id.goog[external-secrets/external-secrets]"

  # Annotate the K8s service account to enable connection take place
  # ???
  03-annotate-kubernetes-service-account:
    cmds:
      - cmd: gum style "Annotate k8s service account to allow it to use IAM serivce account via workload identity"
        silent: true
      - kubectl apply -f ServiceAccount.yaml
    desc: "Add annotation to kubernetes service account for workload identity"

  # Set External Secrets Operator to look for secrets in GCP Secret Manager
  # by appling ClusterSecretStore configuration
  04-apply-cluster-secret-store:
    desc: "Apply the ClusterSecretStore configuration"
    cmds:
      - kubectl apply -f ClusterSecretStore.yaml

  # Tells External Secrets Operator to fetch secrets from GCP Secret Manager.
  # Then, creates K8s Secrets in sepecified namespace by appling ExternalSecret configuration.
  05-apply-external-secret:
    desc: "Apply the ExternalSecret configuration"
    cmds:
      - kubectl apply -f ExternalSecret.yaml

  07-get-secret-value:
    desc: "Retrieve the secret value from the Kubernetes api"
    cmds:
      - kubectl get secrets k8s-external-secrets-mongodb-url -o yaml | yq
      - kubectl get secrets k8s-external-secrets-mongodb-url -o yaml | yq '.data.key-k8s' | base64 -d

  08-delete-namespace:
    desc: "Delete the namespace to clean up"
    cmds:
      - cmd: gum style "ðŸš¨ Deleting the namespace recursively deletes the resources inside of it! ðŸš¨ "
        silent: true
      - kubectl delete ns external-secrets
