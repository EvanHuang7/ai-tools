apiVersion: traefik.containo.us/v1alpha1
kind: IngressRoute
metadata:
  name: frontend
  namespace: ai-tools
spec:
  entryPoints:
    - web
  routes:
    - kind: Rule
      # Don't use "match: Host(`your-domain-name`)" if you don't set a DNS
      # record for the ExternalIP and your own domain

      ########### "PathPrefix(`/`)" Explanation ###########
      # It matches any request path, because every valid URL path starts with "/."
      # Such as, "/", "/dashboard", "/settings", "/api/node", "/api/go", "/api/python".

      ########### "/api/go" matchs which service Explanation ###########
      # "/api/go" matchs both frontend and go-backend services, and Traefik
      # follows most-specific-match-wins logic. That means PathPrefix("/api/go")
      # has higher precedence than PathPrefix("/"). So, Traefik would route the
      # traffic to most specific match → go to go-backend service.

      ########### The flow of browser loads React app in GKE Cluster Explanation ###########
      # For example, user open the app site (e.g., http://aitools-demo-evanhuang.duckdns.org/dashboard)
      # 1. Browser makes a request to http://aitools-demo-evanhuang.duckdns.org/dashboard.
      # 2. This goes to GKE cluster's LoadBalancer (external IP).
      # 3. The Traefik Ingress Controller receives the request.
      # 4. Ingress routes the request to the the frontend service running Nginx pod.
      # 5. The Nginx pod serves your React app static files.
      # 6. Downloads the React app from Nginx.
      # 7. Which returns the built dist files, index.html, JS, CSS, etc.
      # 8. The browser loads the site with these downloaded files.

      ########### The flow of frontend calls backend API in GKE Cluster Explanation ###########
      # For example, browser client call an API with 1 line code, "axios.post("/api/go/messages", { userId, text });",
      # without specifying any host for this api call.
      # 1. "/api/go/messages" is a relative URL — meaning:
      #### It doesn’t specify the protocol (http), hostname, or port.
      #### So the browser automatically resolves it against the current URL in the address bar.
      # 2. Suppose the user’s browser is currently viewing page: "http://aitools-demo-evanhuang.duckdns.org/dashboard"
      # When browser client calls "axios.post("/api/go/messages"), The browser expands it into:
      # "http://aitools-demo-evanhuang.duckdns.org/api/go/messages".
      # The browser adds: "protocol: http", "host: aitools-demo-evanhuang.duckdns.org", "(optional) port: default :80 for HTTP".
      # 3. The API call URL is public because of public domain name or public External IP address
      # - it resolves via DNS to the LoadBalancer External IP instead of internal Cluster IP.
      # 4. Traefik Ingress Controller receives this external HTTP request, and Traefik matches
      # it to  "PathPrefix(`/api/go`)". Then, Traefik forwards that request to the go-backend service.
      match: PathPrefix(`/`)
      services:
        - kind: Service
          name: frontend
          port: 8080
          scheme: http
