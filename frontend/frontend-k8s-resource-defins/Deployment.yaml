apiVersion: apps/v1
kind: Deployment
metadata:
  name: frontend
  namespace: ai-tools
  labels:
    app: frontend
spec:
  replicas: 1
  selector:
    matchLabels:
      app: frontend
  template:
    metadata:
      labels:
        app: frontend
    spec:
      containers:
        - name: frontend
          image: evanhuang7/ai-tools-frontend:developing
          # K8s will always pull the image from Docker Hub, every time
          # a pod starts even if that the image with this tag already exists on the node.
          # If the tag is ":latest" and "imagePullPolicy" is not set,
          # K8s defaults to use "Always".
          # If the tag is custom like ":developing" or ":v1.0",
          # the default is "IfNotPresent".
          # NOTE: You have to manually pruned old images in your host
          # if running Kind Cluster locally and use "Always" option.
          # In GKE, the nodeâ€™s kubelet includes automatic image garbage collection
          # so the kubelet will auto clean up unused images for you.
          imagePullPolicy: Always
          ports:
            - name: http
              containerPort: 8080
              protocol: TCP
          livenessProbe:
            httpGet:
              path: /ping
              port: 8080
            initialDelaySeconds: 10 # Start checking after container starts running 10s
            periodSeconds: 20 # Check every 20s
            timeoutSeconds: 2 # Fail if API call timeout after 2s
            failureThreshold: 3 # If 3 checks in a row fail, restart the container
          readinessProbe:
            httpGet:
              path: /ping
              port: 8080
            initialDelaySeconds: 5
            periodSeconds: 10
            timeoutSeconds: 2
            failureThreshold: 3
          resources:
            limits:
              cpu: 60m
              memory: 120Mi
            requests:
              cpu: 50m
              memory: 100Mi
          securityContext:
            allowPrivilegeEscalation: false
            privileged: false
          volumeMounts:
            # This is a default location nginx will look for config
            - mountPath: /etc/nginx/conf.d
              name: nginx-conf
      securityContext:
        seccompProfile:
          type: RuntimeDefault
      volumes:
        - configMap:
            # The default mode 420 means standard read permissions
            defaultMode: 420
            name: nginx-conf
          name: nginx-conf
